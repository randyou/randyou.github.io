<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>摸鱼的蜗牛</title>
  
  <subtitle>摸鱼的蜗牛</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://randyou.github.io/"/>
  <updated>2020-07-09T07:01:58.506Z</updated>
  <id>http://randyou.github.io/</id>
  
  <author>
    <name>Randy Ou</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gitlab + Jenkins + Harbor + k8s 实现前端持续集成与部署</title>
    <link href="http://randyou.github.io/2020/07/07/gitlab-jenkins-harbor-k8s/"/>
    <id>http://randyou.github.io/2020/07/07/gitlab-jenkins-harbor-k8s/</id>
    <published>2020-07-07T06:20:11.000Z</published>
    <updated>2020-07-09T07:01:58.506Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --><h2 id="CI-CD-流程图"><a href="#CI-CD-流程图" class="headerlink" title="CI/CD 流程图"></a>CI/CD 流程图</h2><p><img src="/images/frontend-ci-cd-2020707.png" alt=""></p><h2 id="前提环境"><a href="#前提环境" class="headerlink" title="前提环境"></a>前提环境</h2><ul><li>已有 Gitlab</li><li>已有 Jenkins</li><li>已有 Harbor</li><li>已有 K8S</li></ul><p>如果还没有以上的环境，先自行搭建。</p><h2 id="在-Harbor-中新建一个项目用来管理前端镜像"><a href="#在-Harbor-中新建一个项目用来管理前端镜像" class="headerlink" title="在 Harbor 中新建一个项目用来管理前端镜像"></a>在 Harbor 中新建一个项目用来管理前端镜像</h2><ol><li><p>新建 fe 项目<br><img src="/images/harbor-new-fe.png" alt=""></p></li><li><p>进入 fe 项目，新建机器人账号<br><img src="/images/harbor-fe-rotbot-acc.png" alt=""></p></li><li><p>保存令牌信息，将其配置到 Jenkins 中（略）<br><img src="/images/harbor-fe-robot-token.png" alt=""></p></li></ol><h2 id="准备一个-Web-项目"><a href="#准备一个-Web-项目" class="headerlink" title="准备一个 Web 项目"></a>准备一个 Web 项目</h2><ol><li>使用 create-react-app 创建一个 React App，这里就叫 my-app<blockquote><p>步骤参考 <a href="https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#create-react-app" target="_blank" rel="noopener">https://zh-hans.reactjs.org/docs/create-a-new-react-app.html#create-react-app</a></p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app my-app</span><br><span class="line">cd my-app</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><ol start="2"><li>在项目中新建文件 Nginx.conf，做为 myapp 的 Nginx 配置文件<blockquote><p>配置文件中将 api 开头的请求都代理到了后端服务，具体地址用 k8s 管理</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># Nginx.conf</span><br><span class="line">upstream backend &#123;</span><br><span class="line">    server my-app-backend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root    &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html;</span><br><span class="line"></span><br><span class="line">    gzip on;</span><br><span class="line">    gzip_min_length 1k;</span><br><span class="line">    gzip_comp_level 3;</span><br><span class="line">    gzip_types text&#x2F;plain application&#x2F;javascript application&#x2F;x-javascript text&#x2F;css application&#x2F;xml text&#x2F;javascript image&#x2F;jpeg image&#x2F;gif image&#x2F;png;</span><br><span class="line">    gzip_vary on;</span><br><span class="line">    gzip_disable &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line">    location &#x2F;api&#x2F; &#123;</span><br><span class="line">        rewrite ^.+api&#x2F;?(.*)$ &#x2F;$1 break;</span><br><span class="line">        proxy_pass  http:&#x2F;&#x2F;backend;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F; &#123;</span><br><span class="line">        add_header Cache-Control no-cache;</span><br><span class="line">        try_files $uri $uri &#x2F;index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location &#x2F;static &#123;</span><br><span class="line">        add_header Cache-Control max-age&#x3D;2592000;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>新建 Dockerfile，用于构建 my-app，生成用于部署的 docker 镜像<blockquote><p>使用分阶段构建，有效使用缓存</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Dockerfile</span><br><span class="line">FROM node:12.17 AS builder</span><br><span class="line"></span><br><span class="line">WORKDIR &#x2F;workspace</span><br><span class="line"></span><br><span class="line">ADD yarn.lock .</span><br><span class="line">ADD package.json .</span><br><span class="line">RUN yarn</span><br><span class="line"></span><br><span class="line">ADD public public</span><br><span class="line">ADD src src</span><br><span class="line">RUN yarn run build</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">FROM nginx:alpine</span><br><span class="line">COPY Nginx.conf &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;app.conf</span><br><span class="line">COPY --from&#x3D;builder &#x2F;workspace&#x2F;build &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html&#x2F;</span><br></pre></td></tr></table></figure><ol start="4"><li>新建 Jenkinsfile，用于执行 Jenkins 流水线<blockquote><p>10.104.6.214 是 Harbor 服务 IP 地址，10.104.6.215:32567 是 k8s 服务地址，请自行修改为自己的 IP 地址<br>使用 package.json 中的 name 字段作为 k8s 命名空间名和容器名<br>imageName 是镜像的 tag，这里会将镜像上传到 Harbor 的 fe 项目下<br>robot_jenkins-test 是上面创建的 Harbor 机器人账号在 Jenkins 中的配置 ID</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;</span><br><span class="line">        branchName &#x3D; sh(returnStdout: true, script: &quot;echo $&#123;GIT_BRANCH&#125; | sed &#39;s&#x2F;origin\\&#x2F;&#x2F;&#x2F;g&#39;&quot;).trim()</span><br><span class="line">        pkgInfo &#x3D; readJSON file: &#39;package.json&#39;</span><br><span class="line">        pkgName &#x3D; &quot;$&#123;pkgInfo.name&#125;&quot;</span><br><span class="line">        commitId &#x3D; sh(returnStdout: true, script: &#39;git rev-parse --short HEAD&#39;).trim()</span><br><span class="line">        imageTag &#x3D; &quot;$&#123;branchName&#125;-$&#123;commitId&#125;&quot;</span><br><span class="line">        imageName &#x3D; &quot;10.104.6.214&#x2F;fe&#x2F;$&#123;pkgName&#125;:$&#123;imageTag&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stages&#123;</span><br><span class="line">        stage(&quot;Build Image&quot;)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                retry(3)&#123;</span><br><span class="line">                    script&#123;</span><br><span class="line">                        appImage &#x3D; docker.build(&quot;$&#123;imageName&#125;&quot;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;Push Image&quot;)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                retry(3)&#123;</span><br><span class="line">                    script&#123;</span><br><span class="line">                        docker.withRegistry(&#39;http:&#x2F;&#x2F;10.104.6.214&#x2F;v2&#39;, &#39;robot_jenkins-test&#39;) &#123;</span><br><span class="line">                            appImage.push()</span><br><span class="line">                            appImage.push(&#39;latest&#39;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>将 my-app 提交后推到 Gitlab 上</li></ol><h2 id="配置-Jenkins"><a href="#配置-Jenkins" class="headerlink" title="配置 Jenkins"></a>配置 Jenkins</h2><ol><li><p>登录 Jenkins 服务，新建任务，新建一个流水线<br><img src="/images/jenkins-new-pipeline.png" alt=""></p></li><li><p>配置流水线<br><img src="/images/jenkins-pipeline-conf.png" alt=""></p></li></ol><blockquote><p>保存后点击立即构建，测试流水线。流水线将构建出一个镜像并推送到 Harbor。</p></blockquote><h2 id="配置-k8s"><a href="#配置-k8s" class="headerlink" title="配置 k8s"></a>配置 k8s</h2><ol><li><p>创建 my-app 命名空间用于部署 my-app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create namespace my-app</span><br></pre></td></tr></table></figure></li><li><p>使用 deployment.yaml 部署 my-app</p><blockquote><p>查看 Harbor 的 fe 项目中 my-app 镜像的 tag 为 master-673d670<br><img src="/images/harbor-image-tag.png" alt=""></p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#  deployment.yaml</span><br><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: my-app   # 部署名称</span><br><span class="line">  namespace: my-app       # 部署到的命名空间</span><br><span class="line">  labels:</span><br><span class="line">    app: my-app</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      name: my-app</span><br><span class="line">      labels:</span><br><span class="line">        app: my-app</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">        - name: my-app</span><br><span class="line">          image: 10.104.6.214&#x2F;fe&#x2F;my-app:master-673d670</span><br><span class="line">          imagePullPolicy: IfNotPresent</span><br><span class="line">          ports:</span><br><span class="line">            - name: http-port</span><br><span class="line">              containerPort: 80</span><br><span class="line">      imagePullSecrets:</span><br><span class="line">        - name: harbor-test-fe</span><br><span class="line">      restartPolicy: Always</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: my-app</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f deployment.yaml</span><br></pre></td></tr></table></figure><blockquote><p>harbor-test-fe 是拉取镜像所需要的令牌信息，具体配置可参考 <a href="/2020/06/16/k8s-pull-from-harbor/" title="k8s 从 Harbor 拉取镜像">k8s 从 Harbor 拉取镜像</a></p></blockquote><p>查看 pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pods -l app&#x3D;my-app -n my-app</span><br></pre></td></tr></table></figure><p>此时 pod 已经部署成功，但是 Ready 一直是 Fasle，查看容器日志发现以下报错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">host not found in upstream &quot;my-app-backend&quot; in &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;app.conf:2</span><br></pre></td></tr></table></figure><p>是因为没有配置 my-app-backend 的 DNS。</p><ol start="3"><li>配置后端服务地址 my-app-backend<blockquote><p>这里假设后端服务没有部署在 k8s 集群上，而是部署在 IP 地址为 192.16.100.56 的服务器上，端口为 26003</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># service.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: my-app-backend</span><br><span class="line">  namespace: my-app</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - protocol: TCP</span><br><span class="line">      port: 80</span><br><span class="line">      targetPort: 26003</span><br><span class="line">      </span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Endpoints</span><br><span class="line">metadata:</span><br><span class="line">  name: my-app-backend</span><br><span class="line">subsets:</span><br><span class="line">  - addresses:</span><br><span class="line">      - ip: 192.16.100.56</span><br><span class="line">    ports:</span><br><span class="line">      - port: 26003</span><br></pre></td></tr></table></figure><p>部署 service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f service.yaml</span><br></pre></td></tr></table></figure><p>删除 pod</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl delete pods my-app-ddc88c8f9-xzcl7 -n my-app</span><br></pre></td></tr></table></figure><p>此时 pod 已经成功运行</p><h2 id="暴露-Web-服务"><a href="#暴露-Web-服务" class="headerlink" title="暴露 Web 服务"></a>暴露 Web 服务</h2><ol><li>为 my-app 创建 service<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl expose deployment&#x2F;my-app -n my-app</span><br></pre></td></tr></table></figure></li><li>配置 ingress 规则<blockquote><p>my-app.com 是域名，如果没有正式域名，修改本机的 hosts 访问即可</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># ingress.yaml</span><br><span class="line">apiVersion: networking.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: Ingress</span><br><span class="line">metadata:</span><br><span class="line">  name: my-app</span><br><span class="line">  namespace: my-app</span><br><span class="line">spec:</span><br><span class="line">  rules:</span><br><span class="line">    - host: my-app.com</span><br><span class="line">      http:</span><br><span class="line">        paths:</span><br><span class="line">          - backend:</span><br><span class="line">              serviceName: my-app</span><br><span class="line">              servicePort: 80</span><br><span class="line">            path: &#x2F;</span><br><span class="line">            pathType: ImplementationSpecific</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f ingress.yaml</span><br></pre></td></tr></table></figure><h2 id="Jenkins-自动化部署"><a href="#Jenkins-自动化部署" class="headerlink" title="Jenkins 自动化部署"></a>Jenkins 自动化部署</h2><ol><li>在 kube-system 下创建一个 ServiceAccount</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># serviceAccount.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: jenkins-user</span><br><span class="line">  namespace: kube-system</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: jenkins-user</span><br><span class="line">  namespace: kube-system</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f serviceAccount.yaml</span><br></pre></td></tr></table></figure><ol start="2"><li><p>查看刚刚创建的 ServiceAccont 的 token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep jenkins-user | awk &#39;&#123;print $1&#125;&#39;)</span><br></pre></td></tr></table></figure></li><li><p>在 Jenkins 增加一个 ID 为 k8s-test-token 的凭据<br><img src="/images/jenkins-k8s-token.png" alt=""></p></li><li><p>修改 Jeninsfile</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment &#123;</span><br><span class="line">        branchName &#x3D; sh(returnStdout: true, script: &quot;echo $&#123;GIT_BRANCH&#125; | sed &#39;s&#x2F;origin\\&#x2F;&#x2F;&#x2F;g&#39;&quot;).trim()</span><br><span class="line">        pkgInfo &#x3D; readJSON file: &#39;package.json&#39;</span><br><span class="line">        pkgName &#x3D; &quot;$&#123;pkgInfo.name&#125;&quot;</span><br><span class="line">        commitId &#x3D; sh(returnStdout: true, script: &#39;git rev-parse --short HEAD&#39;).trim()</span><br><span class="line">        imageTag &#x3D; &quot;$&#123;branchName&#125;-$&#123;commitId&#125;&quot;</span><br><span class="line">        imageName &#x3D; &quot;10.104.6.214&#x2F;fe&#x2F;$&#123;pkgName&#125;:$&#123;imageTag&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stages&#123;</span><br><span class="line">        stage(&quot;Build Image&quot;)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                retry(3)&#123;</span><br><span class="line">                    script&#123;</span><br><span class="line">                        appImage &#x3D; docker.build(&quot;$&#123;imageName&#125;&quot;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;Push Image&quot;)&#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                retry(3)&#123;</span><br><span class="line">                    script&#123;</span><br><span class="line">                        docker.withRegistry(&#39;http:&#x2F;&#x2F;10.104.6.214&#x2F;v2&#39;, &#39;robot_jenkins-test&#39;) &#123;</span><br><span class="line">                            appImage.push()</span><br><span class="line">                            appImage.push(&#39;latest&#39;)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&quot;Deploy Test&quot;)&#123;</span><br><span class="line">            steps&#123;</span><br><span class="line">                withCredentials([string(credentialsId: &#39;k8s-test-token&#39;, variable: &#39;k8s_test_token&#39;)]) &#123;</span><br><span class="line">                    retry(3)&#123; </span><br><span class="line">                        sh &quot;curl -X PATCH \</span><br><span class="line">                                 -H \&quot;content-type: application&#x2F;strategic-merge-patch+json\&quot; \</span><br><span class="line">                                 -H \&quot;Authorization:Bearer $k8s_test_token\&quot; \</span><br><span class="line">                                 -d &#39;&#123;\&quot;spec\&quot;:&#123;\&quot;template\&quot;:&#123;\&quot;spec\&quot;:&#123;\&quot;containers\&quot;:[&#123;\&quot;name\&quot;:\&quot;$&#123;pkgName&#125;\&quot;,\&quot;image\&quot;:\&quot;$&#123;imageName&#125;\&quot;&#125;]&#125;&#125;&#125;&#125;&#39; \</span><br><span class="line">                                    \&quot;http:&#x2F;&#x2F;10.104.6.215:32567&#x2F;k8s-api&#x2F;apis&#x2F;apps&#x2F;v1&#x2F;namespaces&#x2F;$&#123;pkgName&#125;&#x2F;deployments&#x2F;$&#123;pkgName&#125;\&quot;&quot;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        stage(&#39;Deploy Production&#39;) &#123;</span><br><span class="line">            when &#123;</span><br><span class="line">                environment name: &#39;branchName&#39;, value: &#39;master&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            steps &#123;</span><br><span class="line">                script &#123;</span><br><span class="line">                    timeout(time: 15, unit: &#39;MINUTES&#39;) &#123;</span><br><span class="line">                        input message: &#39;立即部署到生产环境？&#39;, ok: &#39;确认部署生产环境&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                    retry(3) &#123;</span><br><span class="line">                        echo &#39;Deploying Production&#39;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Gitlab 自动触发<br><img src="/images/jenkins-trigger.png" alt=""><br><img src="/images/gitlab-webhook.png" alt=""></li></ol><blockquote><p>提交代码到 Gitlab 后将自动触发构建部署</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h2 id=&quot;CI-CD-流程图&quot;&gt;&lt;a href=&quot;#CI-CD-流程图&quot; class=&quot;headerlink&quot;
      
    
    </summary>
    
    
    
      <category term="Harbor" scheme="http://randyou.github.io/tags/Harbor/"/>
    
      <category term="Docker" scheme="http://randyou.github.io/tags/Docker/"/>
    
      <category term="K8S" scheme="http://randyou.github.io/tags/K8S/"/>
    
      <category term="Jenkins" scheme="http://randyou.github.io/tags/Jenkins/"/>
    
      <category term="Gitlab" scheme="http://randyou.github.io/tags/Gitlab/"/>
    
  </entry>
  
  <entry>
    <title>k8s 从 Harbor 拉取镜像</title>
    <link href="http://randyou.github.io/2020/06/16/k8s-pull-from-harbor/"/>
    <id>http://randyou.github.io/2020/06/16/k8s-pull-from-harbor/</id>
    <published>2020-06-16T09:36:10.000Z</published>
    <updated>2020-07-09T07:01:58.506Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --><h2 id="创建机器人账户，用来给-k8s-从一个私有项目拉取镜像"><a href="#创建机器人账户，用来给-k8s-从一个私有项目拉取镜像" class="headerlink" title="创建机器人账户，用来给 k8s 从一个私有项目拉取镜像"></a>创建机器人账户，用来给 k8s 从一个私有项目拉取镜像</h2><ul><li>登录 Harbor</li><li>进入一个私有项目</li><li>点击机器人账户页签，添加一个机器人账号</li><li>输入名称如 test，可以勾选永不过期，权限只需要拉取权限就够了，保存</li></ul><p>保存后生成一个为 <strong>robot$test</strong> 的机器人账号和对应的令牌，保存成文件待用。</p><h2 id="创建-imagePullSecrets"><a href="#创建-imagePullSecrets" class="headerlink" title="创建 imagePullSecrets"></a>创建 imagePullSecrets</h2><ul><li><p>方式一：使用命令直接创建<br>harbor-registry-key 是要创建的 secrets 的名称，这里叫 harbor-registry-key<br>docker-server 对应 Harbor 仓库地址<br>docker-username 是上面的 robot$test<br>docker-password 是 robot$test 对应的令牌 token</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create secret docker-registry harbor-registry-key --docker-server&#x3D;10.104.6.214 --docker-username&#x3D;robot$test --docker-password&#x3D;eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1OTIzMDA1MTQsImlzcyI6ImhhcmJvci10b2tlbi1kZWZhdWx0SXNzdWVyIiwiaWQiOjQsInBpZCI6MiwiYWNjZXNzIjpbeyJSZXNvdXJjZSI6Ii9wcm9qZWN0LzIvcmVwb3NpdG9yeSIsIkFjdGlvbiI6InB1bGwiLCJFZmZlY3QiOiIifV19.sSUxZjxElPHxIlwK7d9yxQ6YpD29mKywXkf5poJeFDdFiDdz3QiNhwlrIcUAX0kt2-j7aeEOnO0mtlmCYRVCgKDQkPLNe3M6O_NN73_HSUWuZyJGGus--nTTe3J2uqFnrN1q9CFtYlhGcuoRPteqoeG4mHwjvnNfpvLAvQZI2Zz2iRG4Nob-5VcBZ0xzyY5oRC3TT0gImLAPQcwZ3ftSccLhXaAJGE2wlrzfWm3UBfAiN_JAhSvlNLX2sg_69YysQmNdwXGYZysTd-xrGl8pihs53CEqQtP_3-KuO1k07qSoG3O85F0qly0CivdIzD2HRJjQ4JrKFY24BiQf7syIvulygYIahYgNY8OF3giCF0q1jY0eg8qFBGAYa4M3KH7aOy_XsJbpHQgLat88lr6se0nWH16OLkRwtHMHvaAjDLm-EWfCMEV7mJgH2lrByqEpuUd5MApMuWoTwR6paNDjlRDunnshYEuy9V3xzcbJwOS4eCGWkGBGyL6vy41Xf87TCDIzKDiH3c4aUueaStlDbRpwPJHHGUpxqontids-YxH5TBf6Bz7mZt9iqdf1aU91bQgwfkmULFo-AqwFF0d5XfsNbAg3-owySgjj3CdT8bkgEj1zh70K8qxjrUMw7gNZLnEyCwVvDEdJKN0b7ZWXnRUezpkQdJs5jLEnifVxF8I</span><br></pre></td></tr></table></figure></li><li><p>方式二：使用 <code>~/.docker/config.json</code> 创建</p></li></ul><p>使用 docker login 登录 Harbor,生成 .docker/config.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@test-10-104-6-215 ~]# docker login 10.104.6.214</span><br><span class="line">Username:  robot$test</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>将文件内容转成 base64 输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test-10-104-6-215 ~]# cat ~&#x2F;.docker&#x2F;config.json |base64 -w 0</span><br><span class="line">ewoJImF1dGhzIjogewoJCSIxMC4xMDQuNi4yMTQiOiB7CgkJCSJhdXRoIjogImNtOWliM1FrZEdWemREcGxlVXBvWWtkamFVOXBTbE5WZWtreFRtbEpjMGx1VWpWalEwazJTV3R3V0ZaRFNqa3VaWGxLY0ZsWVVXbFBha1V4VDFSSmVrMUVRVEZOVkZGelNXMXNlbU41U1RaSmJXaG9ZMjFLZG1OcE1UQmlNblJzWW1reGExcFhXbWhrVjNnd1UxaE9lbVJYVm5sSmFYZHBZVmRSYVU5cVVYTkpia0p3V2tOSk5rMXBkMmxaVjA1cVdsaE9la2xxY0dKbGVVcFRXbGhPZG1SWVNtcGFVMGsyU1drNWQyTnRPWEZhVjA0d1RIcEpkbU50Vm5kaU0wNXdaRWM1ZVdWVFNYTkphMFpxWkVkc2RtSnBTVFpKYmtJeFlrZDNhVXhEU2taYWJWcHNXVE5SYVU5cFNXbG1WakU1TG5OVFZYaGFhbmhGYkZCSWVFbHNkMHMzWkRsNWVGRTJXWEJFTWpsdFMzbDNXR3RtTlhCdlNtVkdSR1JHYVVSa2VqTlJhVTVvZDJ4eVNXTlZRVmd3YTNReUxXbzNZV1ZGVDI1UE1HMTBiRzFEV1ZKV1EyZExSRkZyVUV4T1pUTk5OazlmVGs0M00xOUlVMVZYZFZwNVNrZEhkWE10TFc1VVZHVXpTakoxY1VadWNrNHhjVGxEUm5SWmJHaEhZM1Z2VWxCMFpYRnZaVWMwYlVoM2FuWnVUbVp3ZGt4QmRsRmFTVEphZWpKcFVrYzBUbTlpTFRWV1kwSmFNSGg2ZVZrMWIxSkRNMVJVTUdkSmJVeEJVRkZqZDFvelpuUlRZMk5NYUZoaFFVcEhSVEozYkhKNlpsZHRNMVZDWmtGcFRsOUtRV2hUZG14T1RGZ3ljMmRmTmpsWmVYTlJiVTVrZDFoSFdWcDVjMVJrTFhoeVIydzRjR2xvY3pVelEwVnhVWFJRWHpNdFMzVlBNV3N3TjNGVGIwY3pUemcxUmpCeGJIa3dRMmwyWkVsNlJESklVa3BxVVRSS2NrdEdXVEkwUW1sUlpqZHplVWwyZFd4NVoxbEpZV2haWjA1Wk9FOUdNMmRwUTBZd2NURnFXVEJsWnpoeFJrSkhRVmxoTkUwelMwZzNZVTk1WDFoelNtSndTRkZuVEdGME9EaHNjalp6WlRCdVYwZ3hOazlNYTFKM2RFaE5TSFpoUVdwRVRHMHRSVmRtUTAxRlZqZHRTbWRJTW14eVFubHhSWEIxVldRMVRVRndUWFZYYjFSM1VqWndZVTVFYW14U1JIVnVibk5vV1VWMWVUbFdNM2g2WTJKS2QwOVROR1ZEUjFkclIwSkhlVXcyZG5rME1WaG1PRGRVUTBSSmVrdEVhVWd6WXpSaFZYVmxZVk4wYkVSaVVuQjNVRXBJU0VkVmNIaHhiMjUwYVdSekxWbDRTRFZVUW1ZMlFubzNiVnAwT1dseFpHWXhZVlU1TVdKUlozZG1hMjFWVEVadkxVRnhkMFpHTUdRMVdHWnpUbUpCWnpNdGIzZDVVMmRxYWpORFpGUTRZbXRuUldveGVtZzNNRXM0Y1hocWNsVk5kemRuVGxwTWJrVjVRM2RXZGtSRlpFcExUakJpTjFwWFdHNVNWV1Y2Y0d0UlpFcHpOV3BNUlc1cFpsWjRSamhKIgoJCX0KCX0sCgkiSHR0cEhlYWRlcnMiOiB7CgkJIlVzZXItQWdlbnQiOiAiRG9ja2VyLUNsaWVudC8xOS4wMy44IChsaW51eCkiCgl9Cn0&#x3D;</span><br></pre></td></tr></table></figure><p>创建 secret.yaml 文件，内容如下，.dockerconfigjson 的值为上面输出的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: v1</span><br><span class="line">kind: Secret</span><br><span class="line">metadata:</span><br><span class="line">  name: harbor-registry-key</span><br><span class="line">type: kubernetes.io&#x2F;dockerconfigjson</span><br><span class="line">data:</span><br><span class="line">  .dockerconfigjson: ewoJImF1dGhzIjogewoJCSIxMC4xMDQuNi4yMTQiOiB7CgkJCSJhdXRoIjogImNtOWliM1FrZEdWemREcGxlVXBvWWtkamFVOXBTbE5WZWtreFRtbEpjMGx1VWpWalEwazJTV3R3V0ZaRFNqa3VaWGxLY0ZsWVVXbFBha1V4VDFSSmVrMUVRVEZOVkZGelNXMXNlbU41U1RaSmJXaG9ZMjFLZG1OcE1UQmlNblJzWW1reGExcFhXbWhrVjNnd1UxaE9lbVJYVm5sSmFYZHBZVmRSYVU5cVVYTkpia0p3V2tOSk5rMXBkMmxaVjA1cVdsaE9la2xxY0dKbGVVcFRXbGhPZG1SWVNtcGFVMGsyU1drNWQyTnRPWEZhVjA0d1RIcEpkbU50Vm5kaU0wNXdaRWM1ZVdWVFNYTkphMFpxWkVkc2RtSnBTVFpKYmtJeFlrZDNhVXhEU2taYWJWcHNXVE5SYVU5cFNXbG1WakU1TG5OVFZYaGFhbmhGYkZCSWVFbHNkMHMzWkRsNWVGRTJXWEJFTWpsdFMzbDNXR3RtTlhCdlNtVkdSR1JHYVVSa2VqTlJhVTVvZDJ4eVNXTlZRVmd3YTNReUxXbzNZV1ZGVDI1UE1HMTBiRzFEV1ZKV1EyZExSRkZyVUV4T1pUTk5OazlmVGs0M00xOUlVMVZYZFZwNVNrZEhkWE10TFc1VVZHVXpTakoxY1VadWNrNHhjVGxEUm5SWmJHaEhZM1Z2VWxCMFpYRnZaVWMwYlVoM2FuWnVUbVp3ZGt4QmRsRmFTVEphZWpKcFVrYzBUbTlpTFRWV1kwSmFNSGg2ZVZrMWIxSkRNMVJVTUdkSmJVeEJVRkZqZDFvelpuUlRZMk5NYUZoaFFVcEhSVEozYkhKNlpsZHRNMVZDWmtGcFRsOUtRV2hUZG14T1RGZ3ljMmRmTmpsWmVYTlJiVTVrZDFoSFdWcDVjMVJrTFhoeVIydzRjR2xvY3pVelEwVnhVWFJRWHpNdFMzVlBNV3N3TjNGVGIwY3pUemcxUmpCeGJIa3dRMmwyWkVsNlJESklVa3BxVVRSS2NrdEdXVEkwUW1sUlpqZHplVWwyZFd4NVoxbEpZV2haWjA1Wk9FOUdNMmRwUTBZd2NURnFXVEJsWnpoeFJrSkhRVmxoTkUwelMwZzNZVTk1WDFoelNtSndTRkZuVEdGME9EaHNjalp6WlRCdVYwZ3hOazlNYTFKM2RFaE5TSFpoUVdwRVRHMHRSVmRtUTAxRlZqZHRTbWRJTW14eVFubHhSWEIxVldRMVRVRndUWFZYYjFSM1VqWndZVTVFYW14U1JIVnVibk5vV1VWMWVUbFdNM2g2WTJKS2QwOVROR1ZEUjFkclIwSkhlVXcyZG5rME1WaG1PRGRVUTBSSmVrdEVhVWd6WXpSaFZYVmxZVk4wYkVSaVVuQjNVRXBJU0VkVmNIaHhiMjUwYVdSekxWbDRTRFZVUW1ZMlFubzNiVnAwT1dseFpHWXhZVlU1TVdKUlozZG1hMjFWVEVadkxVRnhkMFpHTUdRMVdHWnpUbUpCWnpNdGIzZDVVMmRxYWpORFpGUTRZbXRuUldveGVtZzNNRXM0Y1hocWNsVk5kemRuVGxwTWJrVjVRM2RXZGtSRlpFcExUakJpTjFwWFdHNVNWV1Y2Y0d0UlpFcHpOV3BNUlc1cFpsWjRSamhKIgoJCX0KCX0sCgkiSHR0cEhlYWRlcnMiOiB7CgkJIlVzZXItQWdlbnQiOiAiRG9ja2VyLUNsaWVudC8xOS4wMy44IChsaW51eCkiCgl9Cn0&#x3D;</span><br></pre></td></tr></table></figure><p>创建 Secrets</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f secret.yaml</span><br></pre></td></tr></table></figure><h3 id="使用-Secrets"><a href="#使用-Secrets" class="headerlink" title="使用 Secrets"></a>使用 Secrets</h3><p>创建 deployment.yaml，内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">apiVersion: apps&#x2F;v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: nginx-app</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      app: nginx-app</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:  </span><br><span class="line">        app: nginx-app</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - name: nginx-app</span><br><span class="line">        image: 10.104.6.214&#x2F;nginx:alpine # 使用 Harbor 上的镜像</span><br><span class="line">        imagePullPolicy: Always</span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 80 </span><br><span class="line">      imagePullSecrets:</span><br><span class="line">      - name: harbor-registry-key # 使用刚刚创建的 Harbor Secrets</span><br></pre></td></tr></table></figure><p>执行部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl create -f deployment.yaml</span><br></pre></td></tr></table></figure><blockquote><p>如果没有成功，检查 deployment 与 创建 Secrets 的 namespace 是否相同</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h2 id=&quot;创建机器人账户，用来给-k8s-从一个私有项目拉取镜像&quot;&gt;&lt;a href=&quot;#创建机器人账户，用来给
      
    
    </summary>
    
    
    
      <category term="Harbor" scheme="http://randyou.github.io/tags/Harbor/"/>
    
      <category term="k8s" scheme="http://randyou.github.io/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>docker login 登录 Harbor</title>
    <link href="http://randyou.github.io/2020/06/16/docker-login-harbor/"/>
    <id>http://randyou.github.io/2020/06/16/docker-login-harbor/</id>
    <published>2020-06-16T07:00:20.000Z</published>
    <updated>2020-07-09T07:01:58.506Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --><h3 id="安装好-Harbor-后如果没有启用-https-直接登录会报错"><a href="#安装好-Harbor-后如果没有启用-https-直接登录会报错" class="headerlink" title="安装好 Harbor 后如果没有启用 https 直接登录会报错"></a>安装好 Harbor 后如果没有启用 https 直接登录会报错</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test-10-104-6-213 ~]# docker login 10.104.6.214</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">Error response from daemon: Get https:&#x2F;&#x2F;10.104.6.214&#x2F;v2&#x2F;: dial tcp 10.104.6.214:443: connect: connection refused</span><br></pre></td></tr></table></figure><h3 id="修改-daemon-json（如果没有就新建一个）"><a href="#修改-daemon-json（如果没有就新建一个）" class="headerlink" title="修改 daemon.json（如果没有就新建一个）"></a>修改 daemon.json（如果没有就新建一个）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure><p>增加或修改内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;insecure-registries&quot;:[&quot;10.104.6.214&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启 docker 服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>重新尝试登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test-10-104-6-213 ~]# docker login 10.104.6.214</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">Error response from daemon: Get http:&#x2F;&#x2F;10.104.6.214&#x2F;v2&#x2F;: Get http:&#x2F;&#x2F;harbor-test-reg.mydomain.com&#x2F;service&#x2F;token?account&#x3D;admin&amp;client_id&#x3D;docker&amp;offline_token&#x3D;true&amp;service&#x3D;harbor-registry: dial tcp: lookup harbor-test-reg.mydomain.com on 172.16.30.212:53: no such host</span><br></pre></td></tr></table></figure><p>如果出现类似错误是应为没有找到 <strong>harbor-test-reg.mydomain.com</strong> 这个域名。<br>我这里并不存在这个域名，所以修改 /etc/hosts，增加一个条目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.104.6.214 harbor-test-reg.mydomain.com</span><br></pre></td></tr></table></figure><p>再次尝试登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@test-10-104-6-213 ~]# docker login 10.104.6.214</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in &#x2F;root&#x2F;.docker&#x2F;config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;reference&#x2F;commandline&#x2F;login&#x2F;#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><p>登录成功</p><h3 id="推送本地镜像到-Habor"><a href="#推送本地镜像到-Habor" class="headerlink" title="推送本地镜像到 Habor"></a>推送本地镜像到 Habor</h3><p>登录成功后就可以推送镜像啦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 给本地 node:12.17 打一个 tag</span><br><span class="line">docker tag node:12.17 10.104.6.214&#x2F;node:12.17</span><br><span class="line"># 推送到 Harbor</span><br><span class="line">docker push 10.104.6.214&#x2F;node:12.17</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h3 id=&quot;安装好-Harbor-后如果没有启用-https-直接登录会报错&quot;&gt;&lt;a href=&quot;#安装好-Ha
      
    
    </summary>
    
    
    
      <category term="docker" scheme="http://randyou.github.io/tags/docker/"/>
    
      <category term="Harbor" scheme="http://randyou.github.io/tags/Harbor/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 7.3 安装 Harbor 镜像仓库</title>
    <link href="http://randyou.github.io/2020/06/16/harbor-install/"/>
    <id>http://randyou.github.io/2020/06/16/harbor-install/</id>
    <published>2020-06-16T06:13:23.000Z</published>
    <updated>2020-07-09T07:01:58.506Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --><h3 id="准备阶段"><a href="#准备阶段" class="headerlink" title="准备阶段"></a>准备阶段</h3><h4 id="开启-80、443、4443-端口"><a href="#开启-80、443、4443-端口" class="headerlink" title="开启 80、443、4443 端口"></a>开启 80、443、4443 端口</h4><p>当然你也可以选择关掉防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;80&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;443&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;4443&#x2F;tcp --permanent</span><br><span class="line"></span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># step 1: 安装必要的一些系统工具</span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"></span><br><span class="line"># Step 2: 添加软件源信息</span><br><span class="line">sudo yum-config-manager --add-repo https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo</span><br><span class="line"></span><br><span class="line"># Step 3: 更新并安装Docker-CE</span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"></span><br><span class="line"># Step 4: 开启Docker服务</span><br><span class="line">sudo systemctl enable docker --now</span><br></pre></td></tr></table></figure><h4 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker-compose"></a>安装 docker-compose</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.26.0&#x2F;docker-compose-$(uname -s)-$(uname -m)&quot; -o &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line"></span><br><span class="line">sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose</span><br><span class="line"></span><br><span class="line">sudo ln -s &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose &#x2F;usr&#x2F;bin&#x2F;docker-compose</span><br></pre></td></tr></table></figure><h4 id="安装最新-openssl"><a href="#安装最新-openssl" class="headerlink" title="安装最新 openssl"></a>安装最新 openssl</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openssl -y</span><br></pre></td></tr></table></figure><h4 id="下载离线-Harbor-v2-0-0-安装包与校验文件"><a href="#下载离线-Harbor-v2-0-0-安装包与校验文件" class="headerlink" title="下载离线 Harbor v2.0.0 安装包与校验文件"></a>下载离线 Harbor v2.0.0 安装包与校验文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;goharbor&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;v2.0.0&#x2F;harbor-offline-installer-v2.0.0.tgz</span><br><span class="line"></span><br><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;goharbor&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;v2.0.0&#x2F;harbor-offline-installer-v2.0.0.tgz.asc</span><br></pre></td></tr></table></figure><h4 id="校验下载的安装包"><a href="#校验下载的安装包" class="headerlink" title="校验下载的安装包"></a>校验下载的安装包</h4><ul><li>检验 MD5<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:&#x2F;&#x2F;github.com&#x2F;goharbor&#x2F;harbor&#x2F;releases&#x2F;download&#x2F;v2.0.0&#x2F;md5sum</span><br><span class="line"></span><br><span class="line">md5sum -c md5sum</span><br></pre></td></tr></table></figure></li></ul><p>如果校验成功会显示如下信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">md5sum: harbor-online-installer-v2.0.0.tgz: No such file or directory</span><br><span class="line">harbor-online-installer-v2.0.0.tgz: FAILED open or read</span><br><span class="line">md5sum: harbor-online-installer-v2.0.0.tgz.asc: No such file or directory</span><br><span class="line">harbor-online-installer-v2.0.0.tgz.asc: FAILED open or read</span><br><span class="line">harbor-offline-installer-v2.0.0.tgz: OK</span><br><span class="line">harbor-offline-installer-v2.0.0.tgz.asc: OK</span><br><span class="line">md5sum: WARNING: 2 listed files could not be read</span><br></pre></td></tr></table></figure><p>上面的信息包含刚刚下载的离线安装包提示 OK</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">harbor-offline-installer-v2.0.0.tgz: OK</span><br><span class="line">harbor-offline-installer-v2.0.0.tgz.asc: OK</span><br></pre></td></tr></table></figure><ul><li>校验 GnuPG 签名</li></ul><p>获取签名公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg --keyserver hkps:&#x2F;&#x2F;keyserver.ubuntu.com --recv-keys 644FF454C0B4115C</span><br></pre></td></tr></table></figure><p>获取成功后信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gpg: requesting key C0B4115C from hkps server keyserver.ubuntu.com</span><br><span class="line">gpg: &#x2F;root&#x2F;.gnupg&#x2F;trustdb.gpg: trustdb created</span><br><span class="line">gpg: key C0B4115C: public key &quot;Harbor-sign (The key for signing Harbor build) &lt;jiangd@vmware.com&gt;&quot; imported</span><br><span class="line">gpg: Total number processed: 1</span><br><span class="line">gpg:               imported: 1  (RSA: 1)</span><br></pre></td></tr></table></figure><p>验证文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gpg -v --keyserver hkps:&#x2F;&#x2F;keyserver.ubuntu.com --verify harbor-offline-installer-v2.0.0.tgz.asc</span><br></pre></td></tr></table></figure><p>成功看到签名信息如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Version: GnuPG v1</span><br><span class="line">gpg: armor header:</span><br><span class="line">gpg: assuming signed data in &#96;harbor-offline-installer-v2.0.0.tgz&#39;</span><br><span class="line">gpg: Signature made Mon 11 May 2020 06:49:33 PM CST using RSA key ID C0B4115C</span><br><span class="line">gpg: using PGP trust model</span><br><span class="line">gpg: Good signature from &quot;Harbor-sign (The key for signing Harbor build) &lt;jiangd@vmware.com&gt;&quot;</span><br><span class="line">gpg: WARNING: This key is not certified with a trusted signature!</span><br><span class="line">gpg:          There is no indication that the signature belongs to the owner.</span><br><span class="line">Primary key fingerprint: 7722 D168 DAEC 4578 06C9  6FF9 644F F454 C0B4 115C</span><br><span class="line">gpg: binary signature, digest algorithm SHA1</span><br></pre></td></tr></table></figure><h3 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h3><p>把解压出来的 harbor 文件夹放到你想安装的地方，比如 /usr/local/harbor</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># step 1: 解压离线安装包</span><br><span class="line">tar xvf harbor-offline-installer-v2.0.0.tgz</span><br><span class="line"></span><br><span class="line"># step 2: 编辑配置文件</span><br><span class="line">cd harbor</span><br><span class="line">cp harbor.yml.tmpl harbor.yml</span><br><span class="line">vim harbor.yml</span><br></pre></td></tr></table></figure><p>需要修改以下内容</p><ul><li><p>hostname：修改成需要使用的域名，为了能外部访问，不要使用 127.0.0.1 或 localhost</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname: reg.mydomain.com</span><br></pre></td></tr></table></figure></li><li><p>https 配置如果没有可以先注释掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># https related config</span><br><span class="line">https:</span><br><span class="line">  # https port for harbor, default is 443</span><br><span class="line">  port: 443</span><br><span class="line">  # The path of cert and key files for nginx</span><br><span class="line">  certificate: &#x2F;your&#x2F;certificate&#x2F;path</span><br><span class="line">  private_key: &#x2F;your&#x2F;private&#x2F;key&#x2F;path</span><br></pre></td></tr></table></figure></li><li><p>data_volume：文件存储地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data_volume: &#x2F;data</span><br></pre></td></tr></table></figure></li></ul><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>执行以下命令开始安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash install.sh</span><br></pre></td></tr></table></figure><p>最后看到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Harbor has been installed and started successfully.</span><br></pre></td></tr></table></figure><p>就是安装成功了</p><h3 id="访问-Harbor"><a href="#访问-Harbor" class="headerlink" title="访问 Harbor"></a>访问 Harbor</h3><p>访问之前配置的域名 <strong>reg.mydomain.com</strong> 或使用 ip 地址访问就可以进入页面</p><p>使用用户名 <strong>admin</strong> 与 之前配置文件中的密码登录，没有修改密码的话默认 <strong>Harbor12345</strong></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h3 id=&quot;准备阶段&quot;&gt;&lt;a href=&quot;#准备阶段&quot; class=&quot;headerlink&quot; title=&quot;准备
      
    
    </summary>
    
    
    
      <category term="Harbor" scheme="http://randyou.github.io/tags/Harbor/"/>
    
      <category term="Docker" scheme="http://randyou.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile 备忘</title>
    <link href="http://randyou.github.io/2020/06/13/dockerfile-memo/"/>
    <id>http://randyou.github.io/2020/06/13/dockerfile-memo/</id>
    <published>2020-06-13T13:29:23.000Z</published>
    <updated>2020-07-09T07:01:58.506Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --><h2 id="使用多阶段构建"><a href="#使用多阶段构建" class="headerlink" title="使用多阶段构建"></a>使用多阶段构建</h2><h4 id="多阶段构建有效使用镜像层级缓存，加快构建速度"><a href="#多阶段构建有效使用镜像层级缓存，加快构建速度" class="headerlink" title="多阶段构建有效使用镜像层级缓存，加快构建速度"></a>多阶段构建有效使用镜像层级缓存，加快构建速度</h4><ul><li>优先添加变化频率更低的文件，提升缓存命中率</li><li>最终镜像中不包含构建阶段使用的工具，大量减小镜像体积</li></ul><h2 id="使用更小的基础镜像"><a href="#使用更小的基础镜像" class="headerlink" title="使用更小的基础镜像"></a>使用更小的基础镜像</h2><h4 id="更小的基础镜像有效节省大量磁盘空间，提高传输效率"><a href="#更小的基础镜像有效节省大量磁盘空间，提高传输效率" class="headerlink" title="更小的基础镜像有效节省大量磁盘空间，提高传输效率"></a>更小的基础镜像有效节省大量磁盘空间，提高传输效率</h4><ul><li>使用 alpine 文件系统通常能获得更小的镜像</li></ul><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">FROM node:alpine AS builder</span><br><span class="line">WORKDIR &#x2F;workspace          # 指定工作目录</span><br><span class="line">COPY yarn.lock .        </span><br><span class="line">COPY package.json .         # 拷贝安装依赖使用到的项目文件 yarn.lock 与 package.json 到当前目录</span><br><span class="line">RUN yarn                    # 安装依赖，yarn.lock 与 package.json 内容不改变的情况下第二次及之后的构建可以命中缓存</span><br><span class="line"></span><br><span class="line">COPY public public</span><br><span class="line">COPY src src                # 拷贝打包阶段用到的源码文件等，排除其他打包阶段不需要的文件可以更有效率使用缓存</span><br><span class="line">RUN yarn run build          # 打包</span><br><span class="line"></span><br><span class="line">FROM nginx:alpine           # 从另一个基础镜像开始构建最终的镜像</span><br><span class="line">COPY nginx.conf.template &#x2F;etc&#x2F;nginx&#x2F;templates&#x2F;app.conf.template     # 拷贝 nginx 配置模版</span><br><span class="line">COPY --from&#x3D;builder &#x2F;workspace&#x2F;build &#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html          # 从上个阶段的镜像 builder 中拷贝打包好的静态资源到 nginx 默认静态文件目录</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Thu Jul 09 2020 07:02:15 GMT+0000 (Coordinated Universal Time) --&gt;&lt;h2 id=&quot;使用多阶段构建&quot;&gt;&lt;a href=&quot;#使用多阶段构建&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
    
      <category term="docker" scheme="http://randyou.github.io/tags/docker/"/>
    
      <category term="Dockerfile" scheme="http://randyou.github.io/tags/Dockerfile/"/>
    
  </entry>
  
</feed>
